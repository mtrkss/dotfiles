{
home.file.".kvmgpupass/kvm.conf".text = ''
VIRSH_GPU_VIDEO=pci_0000_1f_00_0
VIRSH_GPU_AUDIO=pci_0000_1f_00_1
'';

home.file.".kvmgpupass/start.sh".executable = true;
home.file.".kvmgpupass/start.sh".text = ''
#!/run/current-system/sw/bin/bash

# Debugging
# exec 19>/home/owner/Desktop/startlogfile
# BASH_XTRACEFD=19
# set -x
source "/var/lib/libvirt/hooks/kvm.conf"
echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor

# Isolate host to core 0
systemctl set-property --runtime -- user.slice AllowedCPUs=0
systemctl set-property --runtime -- system.slice AllowedCPUs=0
systemctl set-property --runtime -- init.scope AllowedCPUs=0

# Logout
source "/home/owner/Desktop/Sync/Files/Tools/logout.sh"

# Stop display manager
systemctl stop display-manager.service

# Unbind VTconsoles
echo 0 > /sys/class/vtconsole/vtcon0/bind
echo 0 > /sys/class/vtconsole/vtcon1/bind

# Unbind EFI Framebuffer
echo efi-framebuffer.0 > /sys/bus/platform/drivers/efi-framebuffer/unbind

# Avoid race condition
# sleep 5

# Unload kernel modules
modprobe -r amdgpu
modprobe -r snd_hda_intel

# Detach GPU devices from host
virsh nodedev-detach $VIRSH_GPU_VIDEO
virsh nodedev-detach $VIRSH_GPU_AUDIO

# Load vfio module
modprobe vfio
modprobe vfio_pci
modprobe vfio_iommu_type1
'';

home.file.".kvmgpupass/stop.sh".executable = true;
home.file.".kvmgpupass/stop.sh".text = ''
source "/var/lib/libvirt/hooks/kvm.conf"

modprobe -r vfio
modprobe -r vfio_pci
modprobe -r vfio_iommu_type1

sleep 1

virsh nodedev-reattach $VIRSH_GPU_VIDEO
virsh nodedev-reattach $VIRSH_GPU_AUDIO

modprobe amdgpu
modprobe snd_hda_intel

echo "efi-framebuffer.0" > /sys/bus/platform/drivers/efi-framebuffer/bind
echo 1 > /sys/class/vtconsole/vtcon0/bind
echo 1 > /sys/class/vtconsole/vtcon1/bind

sleep 5

systemctl start display-manager

# Return host to all cores
systemctl set-property --runtime -- user.slice AllowedCPUs=0-3
systemctl set-property --runtime -- system.slice AllowedCPUs=0-3
systemctl set-property --runtime -- init.scope AllowedCPUs=0-3

# Change to powersave governor
echo powersave | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
'';

home.file.".kvmgpupass/qemu".executable = true;
home.file.".kvmgpupass/qemu".text = ''
#!/run/current-system/sw/bin/bash
# Author: Sebastiaan Meijer (sebastiaan@passthroughpo.st)

GUEST_NAME="$1"
HOOK_NAME="$2"
STATE_NAME="$3"
MISC="$\{@:4}"

BASEDIR="$(dirname $0)"

HOOKPATH="$BASEDIR/qemu.d/$GUEST_NAME/$HOOK_NAME/$STATE_NAME"

set -e # If a script exits with an error, we should as well.

# check if it's a non-empty executable file
if [ -f "$HOOKPATH" ] && [ -s "$HOOKPATH"] && [ -x "$HOOKPATH" ]; then
    eval \"$HOOKPATH\" "$@"
elif [ -d "$HOOKPATH" ]; then
    while read file; do
        # check for null string
        if [ ! -z "$file" ]; then
          eval \"$file\" "$@"
        fi
    done <<< "$(find -L "$HOOKPATH" -maxdepth 1 -type f -executable -print;)"
fi
'';

}
